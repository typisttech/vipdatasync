# yaml-language-server: $schema=https://goreleaser.com/static/schema.json

version: 2

before:
  hooks:
    - go mod tidy -diff
    - go mod download
    - go mod verify

builds:
  - main: ./cmd/vipdatasync
    env:
      - CGO_ENABLED=0
    goos:
      - linux
      - darwin
    mod_timestamp: '{{ .CommitTimestamp }}'
    flags:
      - -trimpath
    ldflags:
      - -s -w -X main.version={{ .Version }} -X main.fullCommit={{ .FullCommit }} -X main.commitDate={{ .CommitDate }} -X main.gitTreeState={{ .IsGitDirty }} -X main.builtBy=goreleaser

gomod:
  proxy: true
  env:
    - GOPROXY=https://proxy.golang.org
    - GOSUMDB=sum.golang.org

changelog:
  disable: true

# brews:
#   - name: vipdatasync
#     commit_author:
#       name: tangrufusbot
#       email: 39258755+tangrufusbot@users.noreply.github.com
#     directory: Formula
#     homepage: "https://github.com/typisttech/vipdatasync"
#     description: "CLI utility for WordPress VIP data sync management"
#     license: MIT
#     skip_upload: auto
#     custom_block: |
#       # rubocop:disable FormulaAudit/ComponentsOrder,Style/DisableCopsWithinSourceCodeDirective
#       head do
#         url "https://github.com/typisttech/vipdatasync.git", branch: "main"
#         depends_on "go" => :build
#       end
#       # rubocop:enable FormulaAudit/ComponentsOrder,Style/DisableCopsWithinSourceCodeDirective
#     test: |
#       system "#{bin}/vipdatasync", "--version"
#     install: |
#       if build.head?
#         system "go", "build", "-o", "dist/vipdatasync", "./cmd/vipdatasync"
#         bin.install "dist/vipdatasync"
#       else
#         bin.install "vipdatasync"
#       end
#     repository:
#       owner: typisttech
#       name: homebrew-vipdatasync
#       token: "{{ .Env.TAP_GITHUB_TOKEN }}"
#       branch: goreleaser
#       pull_request:
#         enabled: true

sboms:
  - # ID of the sbom config, must be unique.
    #
    # Default: 'default'.
    # id: foo

    # List of names of the SBOM documents created at this step
    # (relative to the dist dir).
    #
    # Each element configured is made available as variables. For example:
    #   documents: ["foo", "bar"]
    #
    # would make the following variables that can be referenced as template keys:
    #   document0: "foo"
    #   document1: "bar"
    #
    # Note that multiple sbom values are only allowed if the value of
    # "artifacts" is "any".
    #
    # Default:
    #   When "binary":   ["{{ .Binary }}_{{ .Version }}_{{ .Os }}_{{ .Arch }}.sbom.json"]
    #   When "any":      []
    #   Otherwise:       ["{{ .ArtifactName }}.sbom.json"]
    # Templates: allowed.
    # documents:
    #   - "${artifact}.spdx.sbom.json"

    # Path to the SBOM generator command
    #
    # Note: the process CWD will be set to the same location as "dist"
    #
    # Default: 'syft'.
    # cmd: syft

    # Command line arguments for the command
    #
    # Default: ["$artifact", "--output", "spdx-json=$document"].
    # Templates: allowed.
    # args: ["$artifact", "--output", "cyclonedx-json=$document"]

    # List of environment variables that will be passed to the SBOM command as
    # well as the templates.
    #
    # Default: [ "SYFT_FILE_METADATA_CATALOGER_ENABLED=true" ].
    # env:
    #   - FOO=bar
    #   - HONK=honkhonk

    # Which artifacts to catalog.
    #
    # Valid options are:
    # - any:        let the SBOM tool decide which artifacts available in
    #               the cwd should be cataloged
    # - source:     source archive
    # - package:    Linux packages (deb, rpm, apk, etc)
    # - installer:  Windows MSI installers (Pro only)
    # - diskimage:  macOS DMG disk images (Pro only)
    # - archive:    archives from archive pipe
    # - binary:     binaries output from the build stage
    #
    # Default: 'archive'.
    artifacts: binary

    # IDs of the artifacts to catalog.
    #
    # If `artifacts` is "source" or "any" then this fields has no effect.
    # ids:
    #   - foo
    #   - bar
